import asyncio
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from config import TOKEN, ADMIN_PASSWORD, MANAGER_PASSWORD
from database import init_db
from keyboards import *
from notifications import setup_notification_scheduler
import handlers.student as student_handlers
import handlers.elder as elder_handlers
import handlers.manager as manager_handlers
import handlers.admin as admin_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database import get_user_room_id, get_room_details, get_user_duties, add_user
    from datetime import datetime
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    room_id = get_user_room_id(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not room_id and username:
        add_user(user_id, username)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    context.user_data['has_room'] = room_id is not None
    
    # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_role = context.user_data.get('role', 'student')
    has_room = context.user_data.get('has_room', False)
    
    # –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –∏ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö
    if has_room and user_role in ['student', 'elder']:
        room_id = get_user_room_id(user_id)
        if room_id:
            room_details = get_room_details(room_id)
            if room_details:
                room_number, block_number, floor_number, dorm_name = room_details
                message += f"üè† –í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_number} (–ë–ª–æ–∫ {block_number}, –≠—Ç–∞–∂ {floor_number}, {dorm_name})\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
                duties = get_user_duties(user_id)
                if duties:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    today = datetime.now().strftime('%Y-%m-%d')
                    today_duty = next(((date, completed) for date, completed in duties if date == today), None)
                    
                    if today_duty:
                        date, completed = today_duty
                        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "üî• –°–µ–≥–æ–¥–Ω—è –≤–∞—à–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!"
                        message += f"üóìÔ∏è {status}\n\n"
                    else:
                        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ
                        next_duty = duties[0] if len(duties) > 0 else None
                        if next_duty:
                            date, completed = next_duty
                            try:
                                date_obj = datetime.strptime(date, '%Y-%m-%d')
                                formatted_date = date_obj.strftime('%d.%m.%Y')
                            except:
                                formatted_date = date
                            message += f"üóìÔ∏è –ë–ª–∏–∂–∞–π—à–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: {formatted_date}\n\n"
                else:
                    message += "üóìÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–∂—É—Ä—Å—Ç–≤.\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    message += "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏.\n\n"
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
    if user_role == 'elder' and 'elder_block_id' not in context.user_data:
        from database import get_blocks_by_floor, get_floors_by_dorm, get_all_dormitories
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–ª–æ–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã –ø–æ –∫–æ–º–Ω–∞—Ç–µ
        if room_id:
            room_details = get_room_details(room_id)
            if room_details:
                # –í room_details –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è room_number, block_number, floor_number, dorm_name
                # –ù–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –±–ª–æ–∫–∞
                from sqlite3 import connect
                from config import DB_NAME
                conn = connect(DB_NAME)
                c = conn.cursor()
                
                c.execute('''
                    SELECT b.id
                    FROM rooms r
                    JOIN blocks b ON r.block_id = b.id
                    WHERE r.id = ?
                ''', (room_id,))
                
                block_result = c.fetchone()
                conn.close()
                
                if block_result:
                    context.user_data['elder_block_id'] = block_result[0]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
    if user_role == 'student':
        message += "üîπ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö\n"
    elif user_role == 'elder':
        message += "üîπ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –∏ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏ –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ\n"
    elif user_role == 'manager':
        message += "üîπ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∑–∞–≤–µ–¥—É—é—â–∏–π –∏ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–µ–∂–∏—Ç–∏—è–º–∏\n"
    elif user_role == 'admin':
        message += "üîπ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reply_markup = get_main_menu(user_role, has_room)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback query
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        try:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É BadRequest, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
            if "Message is not modified" in str(e):
                # –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                pass
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise e
    elif update.message:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏
    
    callback_data = query.data
    user_role = context.user_data.get('role', 'student')
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    if callback_data == "back_to_main":
        await start(update, context)
        return
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–æ–ª–∏
    if callback_data == "login_elder":
        await elder_handlers.request_elder_password(update, context)
        return
    elif callback_data == "login_manager":
        await manager_handlers.request_manager_password(update, context)
        return
    elif callback_data == "login_admin":
        await admin_handlers.request_admin_password(update, context)
        return
    elif callback_data == "logout_role":
        context.user_data['role'] = 'student'
        await start(update, context)
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_role == 'student':
        await student_handlers.handle_student_buttons(update, context)
    elif user_role == 'elder':
        await elder_handlers.handle_elder_buttons(update, context)
    elif user_role == 'manager':
        await manager_handlers.handle_manager_buttons(update, context)
    elif user_role == 'admin':
        await admin_handlers.handle_admin_buttons(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_role = context.user_data.get('role', 'student')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    if context.user_data.get('awaiting_elder_password'):
        await elder_handlers.handle_elder_password(update, context)
        return
    elif context.user_data.get('awaiting_manager_password'):
        await manager_handlers.handle_manager_password(update, context)
        return
    elif context.user_data.get('awaiting_admin_password'):
        await admin_handlers.handle_admin_password(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == 'student':
        await student_handlers.handle_student_text(update, context)
    elif user_role == 'elder':
        await elder_handlers.handle_elder_text(update, context)
    elif user_role == 'manager':
        await manager_handlers.handle_manager_text(update, context)
    elif user_role == 'admin':
        await admin_handlers.handle_admin_text(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setup_notification_scheduler(application)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
