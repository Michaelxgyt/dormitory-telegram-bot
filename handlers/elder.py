from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import (
    get_block_password,
    update_user_role,
    get_user_role,
    get_user_room_id,
    get_room_details,
    get_rooms_by_block,
    get_block_schedule,
    create_duty_schedule,
    update_duty_room,
    update_duty_status,
    get_block_notification_settings, # –ò–∑–º–µ–Ω–µ–Ω–æ
    save_block_notification_setting, # –ò–∑–º–µ–Ω–µ–Ω–æ
    get_users_by_room,
    add_room,
    get_room_id, # –ë—ã–ª get_room_id, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –Ω—É–∂–µ–Ω
    delete_user,
    delete_rooms_in_block,
    get_duty_room # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è update_duty_assignment
)
from keyboards import (
    get_elder_panel,
    get_edit_duty_menu,
    get_select_room_for_duty_menu,
    get_schedule_menu,
    get_notification_settings_menu,
    get_back_button,
    get_residents_menu,
    get_resident_actions_menu,
    get_confirmation_menu
)
from config import DEFAULT_NOTIFICATION_SETTINGS # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
async def request_elder_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    query = update.callback_query

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    context.user_data['awaiting_elder_password'] = True

    await query.edit_message_text(
        "üîê –î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=get_back_button()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
async def handle_elder_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    context.user_data['awaiting_elder_password'] = False

    user_id = update.effective_user.id
    entered_password = update.message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await update.message.delete()
    except Exception as e:
        # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º: {str(e)}")
        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    from database import get_all_dormitories, get_floors_by_dorm, get_blocks_by_floor

    dormitories = get_all_dormitories()
    valid_block_id = None
    block_number_str = None # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±—â–µ–∂–∏—Ç–∏—è–º, —ç—Ç–∞–∂–∞–º –∏ –±–ª–æ–∫–∞–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    for dorm_id, _ in dormitories:
        floors = get_floors_by_dorm(dorm_id)
        for floor_id, _ in floors:
            blocks = get_blocks_by_floor(floor_id)
            for block_id_db, block_num_db in blocks: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞
                stored_password = get_block_password(block_id_db)
                if stored_password and entered_password == stored_password:
                    valid_block_id = block_id_db
                    block_number_str = block_num_db
                    context.user_data['elder_block_id'] = block_id_db
                    break
            if valid_block_id:
                break
        if valid_block_id:
            break

    if valid_block_id:
        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å 'elder'
        update_user_role(user_id, 'elder')
        context.user_data['role'] = 'elder'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
        room_id_user = get_user_room_id(user_id) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        has_room = room_id_user is not None
        context.user_data['has_room'] = has_room

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        username = update.effective_user.username or update.effective_user.first_name

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã (–æ–±—â–µ–∂–∏—Ç–∏–µ, —ç—Ç–∞–∂)
        from sqlite3 import connect
        from config import DB_NAME
        conn = connect(DB_NAME)
        c = conn.cursor()

        c.execute('''
            SELECT f.floor_number, d.name
            FROM blocks b
            JOIN floors f ON b.floor_id = f.id
            JOIN dormitories d ON f.dorm_id = d.id
            WHERE b.id = ?
        ''', (valid_block_id,)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º valid_block_id
        block_info = c.fetchone()
        conn.close()

        if block_info:
            floor_number, dorm_name = block_info
            message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞ {dorm_name}, {floor_number} - —ç—Ç–∞–∂, {block_number_str} - –±–ª–æ–∫–∞ \n\n"
        else:
            # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –±–ª–æ–∫–∞ {block_number_str} \n\n"


        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
        if has_room:
            room_details = get_room_details(room_id_user)
            if room_details:
                room_number_user, block_num_user, floor_number_user, dorm_name_user = room_details
                message += f"üè† –í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_number_user} (–ë–ª–æ–∫ {block_num_user}, –≠—Ç–∞–∂ {floor_number_user}, {dorm_name_user})\n\n"

        message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã
        from keyboards import get_main_menu
        await update.message.reply_text(
            message,
            reply_markup=get_main_menu('elder', has_room)
        )
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–≤–µ–¥—É—é—â–µ–º—É.",
            reply_markup=get_back_button()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã
async def handle_elder_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    query = update.callback_query
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç —Ä–æ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'elder' and context.user_data.get('role') != 'elder':
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã.",
            reply_markup=get_back_button()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # elder_block_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ –ø–∞—Ä–æ–ª—é
    current_elder_block_id = context.user_data.get('elder_block_id')
    if not current_elder_block_id:
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        room_id_user = get_user_room_id(user_id)
        if room_id_user:
            # –ü–æ–ª—É—á–∞–µ–º block_id –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from sqlite3 import connect
            from config import DB_NAME
            conn = connect(DB_NAME)
            c = conn.cursor()
            c.execute('SELECT block_id FROM rooms WHERE id = ?', (room_id_user,))
            block_id_res = c.fetchone()
            conn.close()
            if block_id_res:
                current_elder_block_id = block_id_res[0]
                context.user_data['elder_block_id'] = current_elder_block_id
            else:
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_back_button()
                )
                return
        else: # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –∏ –±–ª–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–∫
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É.",
                reply_markup=get_back_button()
            )
            return


    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
    if callback_data == "elder_panel" or callback_data == "back_to_panel":
        await show_elder_panel(update, context)
    elif callback_data == "auto_schedule":
        await select_start_room(update, context)
    elif callback_data.startswith("start_room_"):
        room_id_start = int(callback_data.split("_")[2]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        await confirm_schedule_creation(update, context, room_id_start)
    elif callback_data.startswith("confirm_create_"):
        room_id_start_confirm = int(callback_data.split("_")[2]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        await create_schedule(update, context, room_id_start_confirm)
    elif callback_data == "view_schedule":
        await show_schedule(update, context)
    elif callback_data.startswith("schedule_"):
        action = callback_data.split("_")[1]
        if action == "prev":
            context.user_data['schedule_page'] = max(0, context.user_data.get('schedule_page', 0) - 1)
        elif action == "next":
            context.user_data['schedule_page'] = context.user_data.get('schedule_page', 0) + 1
        await show_schedule(update, context)
    elif callback_data == "edit_duty":
        await select_duty_to_edit(update, context)

    # –î–µ–π—Å—Ç–≤–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–∂—É—Ä—Å—Ç–≤)
    elif callback_data == "select_room":
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –º–æ–¥—É–ª—è student
        from handlers.student import select_dormitory
        await select_dormitory(update, context)
    elif callback_data == "my_duties":
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–∂—É—Ä—Å—Ç–≤ –∏–∑ –º–æ–¥—É–ª—è student
        from handlers.student import show_my_duties
        await show_my_duties(update, context)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
    elif callback_data.startswith("dorm_") or callback_data.startswith("floor_") or callback_data.startswith("block_") or \
         callback_data == "back_to_floors" or callback_data == "back_to_blocks" or callback_data == "select_dorm" or \
         callback_data.startswith("room_") or callback_data.startswith("confirm_room_"):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
        from handlers.student import handle_student_buttons
        await handle_student_buttons(update, context)
    elif callback_data.startswith("edit_duty_"):
        if callback_data == "edit_duty_prev":
            context.user_data['edit_duty_page'] = max(0, context.user_data.get('edit_duty_page', 0) - 1)
            await select_duty_to_edit(update, context)
        elif callback_data == "edit_duty_next":
            context.user_data['edit_duty_page'] = context.user_data.get('edit_duty_page', 0) + 1
            await select_duty_to_edit(update, context)
        else:
            duty_id_edit = int(callback_data.split("_")[2]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
            await select_new_room_for_duty(update, context, duty_id_edit)
    elif callback_data.startswith("assign_duty_"):
        parts = callback_data.split("_")
        duty_id_assign = int(parts[2]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        room_id_assign = int(parts[3]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        await update_duty_assignment(update, context, duty_id_assign, room_id_assign)
    elif callback_data == "notification_settings":
        await show_notification_settings(update, context)
    elif callback_data == "change_preview_time":
        await request_preview_time(update, context)
    elif callback_data == "change_duty_time":
        await request_duty_time(update, context)
    elif callback_data == "change_preview_text":
        await request_preview_text(update, context)
    elif callback_data == "change_duty_text":
        await request_duty_text(update, context)
    elif callback_data == "list_residents":
        await list_block_residents(update, context)
    elif callback_data == "create_rooms":
        await request_room_range(update, context)
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    elif callback_data.startswith("rooms_"):
        action = callback_data.split("_")[1]
        if action == "prev":
            context.user_data['rooms_page'] = max(0, context.user_data.get('rooms_page', 0) - 1)
        elif action == "next":
            context.user_data['rooms_page'] = context.user_data.get('rooms_page', 0) + 1
        await list_block_residents(update, context)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    elif callback_data.startswith("show_room_residents_"):
        await show_room_residents(update, context)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –∂–∏—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–∞ –µ—Å–ª–∏ –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–Ω–∞—Ç—ã)
    elif callback_data.startswith("residents_"): # –û—Å—Ç–∞–≤–∏–º –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        action = callback_data.split("_")[1]
        if action == "prev":
            context.user_data['residents_page'] = max(0, context.user_data.get('residents_page', 0) - 1)
        elif action == "next":
            context.user_data['residents_page'] = context.user_data.get('residents_page', 0) + 1
        await list_block_residents(update, context) # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±–æ–ª–µ–µ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é

    # –î–µ–π—Å—Ç–≤–∏—è —Å –∂–∏—Ç–µ–ª—è–º–∏
    elif callback_data.startswith("manage_resident_"):
        resident_user_id = int(callback_data.split("_")[2]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        await show_resident_actions(update, context, resident_user_id)
    elif callback_data == "change_resident_room": # –≠—Ç–∞ callback_data –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–π –±–µ–∑ user_id
        await change_resident_room(update, context) # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—Ä–∞—Ç—å user_id –∏–∑ context
    elif callback_data.startswith("set_resident_room_"):
        await set_resident_room(update, context)
    elif callback_data == "confirm_delete_resident": # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, user_id –∏–∑ context
        await confirm_delete_resident(update, context)
    elif callback_data.startswith("delete_resident_"): # –≠—Ç–∞ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç user_id
        await delete_resident(update, context)

    # –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
    elif callback_data.startswith("remove_resident_"): # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_resident_actions_menu
        user_id_remove = int(callback_data.split("_")[2])
        await confirm_remove_resident(update, context, user_id_remove)
    elif callback_data.startswith("confirm_remove_"): # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_confirmation_menu
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ confirm_remove_* –µ—Å–ª–∏ –Ω–µ —É—Ç–æ—á–Ω–∏—Ç—å 'action'
        # –í admin.py —Ç–æ–∂–µ –µ—Å—Ç—å "confirm_remove_", –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∏—Ö –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
        # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, —Ç–æ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –∂–∏—Ç–µ–ª—è
        user_id_confirm_remove = int(callback_data.split("_")[2])
        await remove_resident(update, context, user_id_confirm_remove)
    elif callback_data == "cancel_action": # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_confirmation_menu
        # –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—É–¥–∞ –æ—Ç–º–µ–Ω—è—Ç—å. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–∏–µ –∂–∏—Ç–µ–ª—è, —Ç–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∂–∏—Ç–µ–ª–µ–π.
        # –ï—Å–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º —Ç–æ—á–Ω–æ, –ª—É—á—à–µ –Ω–∞ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç.
        # –í admin.py "cancel_action" –≤–µ–¥–µ—Ç –Ω–∞ show_users.
        # –°–¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∂–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–∏–º–∏.
        if context.user_data.get('resident_user_id'): # –ï—Å–ª–∏ –º—ã —É–ø—Ä–∞–≤–ª—è–ª–∏ –∂–∏—Ç–µ–ª–µ–º
             await list_block_residents(update, context)
        else: # –ò–Ω–∞—á–µ –Ω–∞ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã
            await show_elder_panel(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä–æ—Å—Ç—ã
async def handle_elder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    user_id = update.effective_user.id
    current_elder_block_id = context.user_data.get('elder_block_id') # –ü–æ–ª—É—á–∞–µ–º ID –±–ª–æ–∫–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç —Ä–æ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã
    if get_user_role(user_id) != 'elder' and context.user_data.get('role') != 'elder':
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã.",
            reply_markup=get_back_button()
        )
        return

    if not current_elder_block_id: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID –±–ª–æ–∫–∞
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_back_button()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if context.user_data.get('awaiting_preview_time'):
        context.user_data['awaiting_preview_time'] = False
        preview_time = update.message.text
        save_block_notification_setting(current_elder_block_id, 'preview_time', preview_time)
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {preview_time}.",
            reply_markup=get_elder_panel()
        )
    elif context.user_data.get('awaiting_duty_time'):
        context.user_data['awaiting_duty_time'] = False
        duty_time = update.message.text
        save_block_notification_setting(current_elder_block_id, 'duty_time', duty_time)
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {duty_time}.",
            reply_markup=get_elder_panel()
        )
    elif context.user_data.get('awaiting_preview_text'):
        context.user_data['awaiting_preview_text'] = False
        preview_text = update.message.text
        save_block_notification_setting(current_elder_block_id, 'preview_text', preview_text)
        await update.message.reply_text(
            f"‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω.",
            reply_markup=get_elder_panel()
        )
    elif context.user_data.get('awaiting_duty_text'):
        context.user_data['awaiting_duty_text'] = False
        duty_text = update.message.text
        save_block_notification_setting(current_elder_block_id, 'duty_text', duty_text)
        await update.message.reply_text(
            f"‚úÖ –¢–µ–∫—Å—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω.",
            reply_markup=get_elder_panel()
        )
    elif context.user_data.get('awaiting_room_range'):
        context.user_data['awaiting_room_range'] = False
        await process_room_range(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_elder_panel()
        )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç—ã
async def show_elder_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    query = update.callback_query
    await query.edit_message_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ—Å—Ç—ã\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏ –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ.",
        reply_markup=get_elder_panel()
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def select_start_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –¥–µ–∂—É—Ä—Å—Ç–≤–æ"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ
    rooms = get_rooms_by_block(current_elder_block_id)

    if not rooms:
        await query.edit_message_text(
            "–í –≤–∞—à–µ–º –±–ª–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –≤ –±–ª–æ–∫–µ' –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–≤–µ–¥—É—é—â–µ–º—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    keyboard = []
    row = []

    for i, (room_id_db, room_number_db) in enumerate(rooms): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞
        row.append(InlineKeyboardButton(
            f"üõèÔ∏è {room_number_db}",
            callback_data=f"start_room_{room_id_db}"
        ))

        if len(row) == 2 or i == len(rooms) - 1:
            keyboard.append(row)
            row = []

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="elder_panel")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è —Ü–∏–∫–ª –¥–µ–∂—É—Ä—Å—Ç–≤–∞:",
        reply_markup=reply_markup
    )

async def confirm_schedule_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, start_room_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤"""
    query = update.callback_query

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    room_details = get_room_details(start_room_id)

    if not room_details:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    room_number, _, _, _ = room_details # block_number, floor_number, dorm_name –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"confirm_create_{start_room_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="elder_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–º–Ω–∞—Ç—ã {room_number}.\n\n"
        f"–î–µ–∂—É—Ä—Å—Ç–≤–∞ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π.\n\n"
        f"–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=reply_markup
    )

async def create_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, start_room_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤"""
    query = update.callback_query

    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    success = create_duty_schedule(start_room_id) # block_id –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, –æ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏

    if success:
        await query.edit_message_text(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            reply_markup=get_elder_panel()
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ –µ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_elder_panel()
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –±–ª–æ–∫–∞"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    # –≠—Ç–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏–º—è –±–ª–æ–∫–∞ –≤ context.user_data –ø—Ä–∏ –≤—Ö–æ–¥–µ
    block_info_str = ""
    from sqlite3 import connect
    from config import DB_NAME
    conn = connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        SELECT b.block_number, f.floor_number, d.name
        FROM blocks b
        JOIN floors f ON b.floor_id = f.id
        JOIN dormitories d ON f.dorm_id = d.id
        WHERE b.id = ?
    ''', (current_elder_block_id,))
    res_block_info = c.fetchone()
    conn.close()
    if res_block_info:
        block_num, floor_num, dorm_name = res_block_info
        block_info_str = f" ({dorm_name}, —ç—Ç–∞–∂ {floor_num}, –±–ª–æ–∫ {block_num})"


    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è –±–ª–æ–∫–∞
    schedule = get_block_schedule(current_elder_block_id)

    if not schedule:
        await query.edit_message_text(
            f"üóìÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏{block_info_str}\n\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.\n\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤'.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    total_duties = len(schedule)
    completed_duties = sum(1 for _, _, _, completed in schedule if completed)
    completion_rate = round(completed_duties / total_duties * 100) if total_duties > 0 else 0

    # –ù–∞—Ö–æ–¥–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ
    from datetime import datetime
    today = datetime.now().strftime('%Y-%m-%d')
    today_duty_info = next(((duty_id, date_str, room_num, completed_status) for duty_id, date_str, room_num, completed_status in schedule if date_str == today), None) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = context.user_data.get('schedule_page', 0)
    items_per_page = 7
    total_pages = (len(schedule) + items_per_page - 1) // items_per_page

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    if page >= total_pages and total_pages > 0 : # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É total_pages > 0
        page = total_pages -1
        context.user_data['schedule_page'] = page
    elif page < 0:
        page = 0
        context.user_data['schedule_page'] = page


    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(schedule))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö
    message = f"üóìÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏{block_info_str}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    message += f"\u2022 –í—Å–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤: {total_duties}\n"
    message += f"\u2022 –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_duties} ({completion_rate}%)\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–µ
    if today_duty_info:
        _, _, room_number_today, completed_today = today_duty_info # duty_id, date –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å
        status_today = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed_today else "üî• –°–µ–≥–æ–¥–Ω—è"
        message += f"\n–°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç: –ö–æ–º–Ω–∞—Ç–∞ {room_number_today} ({status_today})\n"

    message += "\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤:\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    for _, date_duty, room_number_duty, completed_duty in schedule[start_idx:end_idx]: # duty_id –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            date_obj = datetime.strptime(date_duty, '%Y-%m-%d')
            weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            weekday = weekdays[date_obj.weekday()]
            formatted_date = f"{date_obj.strftime('%d.%m.%Y')} ({weekday})"
        except:
            formatted_date = date_duty

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if completed_duty:
            status_duty = "‚úÖ"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ª–∏ —ç—Ç–æ –¥–µ–∂—É—Ä—Å—Ç–≤–æ
            if date_duty == today:
                status_duty = "üî•"
            else:
                status_duty = "‚è≥"

        message += f"\u2022 {formatted_date}: –ö–æ–º–Ω–∞—Ç–∞ {room_number_duty} {status_duty}\n"

    if total_pages > 0 : # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        message += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    message += "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–µ—Ä–Ω—É–≤—à–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã –∏ –Ω–∞–∂–∞–≤ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ'."

    await query.edit_message_text(
        message,
        reply_markup=get_schedule_menu(page, total_pages)
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤
async def select_duty_to_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è –±–ª–æ–∫–∞
    schedule = get_block_schedule(current_elder_block_id)

    if not schedule:
        await query.edit_message_text(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–µ—Å–ª–∏ –æ–Ω–æ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –µ—â–µ, –Ω–æ –≤—Ä–æ–¥–µ –±—ã get_edit_duty_menu –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç)
    # context.user_data['duty_schedule'] = schedule # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = context.user_data.get('edit_duty_page', 0)
    items_per_page = 5 # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_duty_menu(schedule, page, items_per_page)
    )

async def select_new_room_for_duty(update: Update, context: ContextTypes.DEFAULT_TYPE, duty_id: int):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ
    rooms = get_rooms_by_block(current_elder_block_id)

    if not rooms:
        await query.edit_message_text(
            "–í –≤–∞—à–µ–º –±–ª–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞:",
        reply_markup=get_select_room_for_duty_menu(rooms, duty_id)
    )

async def update_duty_assignment(update: Update, context: ContextTypes.DEFAULT_TYPE, duty_id: int, new_room_id: int): # room_id –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ new_room_id
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–∞ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
    query = update.callback_query

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    old_room_id = get_duty_room(duty_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    update_duty_room(duty_id, new_room_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    room_details_new = get_room_details(new_room_id) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª

    if not room_details_new:
        await query.edit_message_text(
            "–î–µ–∂—É—Ä—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
            reply_markup=get_back_button("elder_panel") # –ò–ª–∏ get_elder_panel()
        )
        return

    room_number_new, _, _, _ = room_details_new # block_number, floor_number, dorm_name –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    from notifications import send_duty_change_notification
    await send_duty_change_notification(context.bot, duty_id, old_room_id, new_room_id)

    await query.edit_message_text(
        f"‚úÖ –î–µ–∂—É—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É {room_number_new}.\n\n"
        f"–ñ–∏—Ç–µ–ª–∏ –∫–æ–º–Ω–∞—Ç (—Å—Ç–∞—Ä–æ–π, –µ—Å–ª–∏ –±—ã–ª–∞, –∏ –Ω–æ–≤–æ–π) –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏.",
        reply_markup=get_elder_panel()
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def show_notification_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_back_button()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
    block_settings = get_block_notification_settings(current_elder_block_id)

    # –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –±–µ—Ä–µ–º –∏—Ö –∏–∑ DEFAULT_NOTIFICATION_SETTINGS
    preview_time = block_settings.get('preview_time', DEFAULT_NOTIFICATION_SETTINGS['preview_time'])
    duty_time = block_settings.get('duty_time', DEFAULT_NOTIFICATION_SETTINGS['duty_time'])
    preview_text_example = block_settings.get('preview_text', DEFAULT_NOTIFICATION_SETTINGS['preview_text'])
    duty_text_example = block_settings.get('duty_text', DEFAULT_NOTIFICATION_SETTINGS['duty_text'])


    await query.edit_message_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {preview_time}\n"
        f"‚Ä¢ –î–µ–∂—É—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {duty_time}\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ (–ø—Ä–∏–º–µ—Ä): \"{preview_text_example[:50]}...\"\n" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        f"‚Ä¢ –¢–µ–∫—Å—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ (–ø—Ä–∏–º–µ—Ä): \"{duty_text_example[:50]}...\"\n\n"         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_notification_settings_menu(preview_time, duty_time)
    )

async def request_preview_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    query = update.callback_query
    context.user_data['awaiting_preview_time'] = True

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):",
        reply_markup=get_back_button("notification_settings")
    )

async def request_duty_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    query = update.callback_query
    context.user_data['awaiting_duty_time'] = True

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00):",
        reply_markup=get_back_button("notification_settings")
    )

async def request_preview_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    query = update.callback_query
    context.user_data['awaiting_preview_text'] = True
    current_elder_block_id = context.user_data.get('elder_block_id')

    current_text = DEFAULT_NOTIFICATION_SETTINGS['preview_text'] # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if current_elder_block_id:
        block_settings = get_block_notification_settings(current_elder_block_id)
        current_text = block_settings.get('preview_text', current_text)

    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞: \"{current_text}\"\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_back_button("notification_settings")
    )

async def request_duty_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    query = update.callback_query
    context.user_data['awaiting_duty_text'] = True
    current_elder_block_id = context.user_data.get('elder_block_id')

    current_text = DEFAULT_NOTIFICATION_SETTINGS['duty_text'] # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if current_elder_block_id:
        block_settings = get_block_notification_settings(current_elder_block_id)
        current_text = block_settings.get('duty_text', current_text)

    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞: \"{current_text}\"\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_back_button("notification_settings")
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è–º–∏ –±–ª–æ–∫–∞
async def list_block_residents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∏—Ç–µ–ª–µ–π"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ
    rooms = get_rooms_by_block(current_elder_block_id)

    if not rooms:
        await query.edit_message_text(
            "–í –≤–∞—à–µ–º –±–ª–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–≤–µ–¥—É—é—â–µ–º—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∂–∏—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ
    rooms_info = []
    total_residents = 0

    for room_id_db, room_number_db in rooms: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞
        users_in_room = get_users_by_room(room_id_db) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        resident_count = len(users_in_room)
        rooms_info.append((room_id_db, room_number_db, resident_count))
        total_residents += resident_count

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = context.user_data.get('rooms_page', 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'rooms_page' –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç
    items_per_page = 8
    total_pages = (len(rooms_info) + items_per_page - 1) // items_per_page

    if page >= total_pages and total_pages > 0:
        page = total_pages - 1
        context.user_data['rooms_page'] = page
    elif page < 0 :
        page = 0
        context.user_data['rooms_page'] = page


    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(rooms_info))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    for room_id_page, room_number_page, resident_count_page in rooms_info[start_idx:end_idx]: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        # –ò–∫–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ—Å—Ç—å –ª–∏ –∂–∏—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
        room_icon = "üîµ" if resident_count_page > 0 else "‚ö™"
        keyboard.append([InlineKeyboardButton(
            f"{room_icon} –ö–æ–º–Ω–∞—Ç–∞ {room_number_page} ({resident_count_page} —á–µ–ª.)",
            callback_data=f"show_room_residents_{room_id_page}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="rooms_prev"))
    if end_idx < len(rooms_info): # end_idx < len(rooms_info) –∞ –Ω–µ total_pages, —Ç.–∫. page —Å 0
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="rooms_next"))

    if nav_row:
        keyboard.append(nav_row)

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_panel")]) # –∏–ª–∏ elder_panel

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üè† –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ:\n\n"
    message += f"–í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: {len(rooms_info)}\n"
    message += f"–í—Å–µ–≥–æ –∂–∏—Ç–µ–ª–µ–π: {total_residents}\n\n"
    if total_pages > 0:
         message += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –µ—ë –∂–∏—Ç–µ–ª–µ–π:"

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_room_residents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    callback_data = query.data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    room_id_show = int(callback_data.split('_')[-1]) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
    context.user_data['current_room_id_for_residents_view'] = room_id_show

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã
    # current_elder_block_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    current_elder_block_id = context.user_data.get('elder_block_id')
    if not current_elder_block_id: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É
        await query.edit_message_text("–û—à–∏–±–∫–∞: –±–ª–æ–∫ —Å—Ç–∞—Ä–æ—Å—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.", reply_markup=get_back_button("elder_panel"))
        return

    rooms_in_block = get_rooms_by_block(current_elder_block_id) # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
    room_number_show = None
    for r_id, r_num in rooms_in_block:
        if r_id == room_id_show:
            room_number_show = r_num
            break

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
    users_in_room_show = get_users_by_room(room_id_show) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if room_number_show:
        message = f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ {room_number_show}\n\n"
    else:
        message = "üõèÔ∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ (–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)\n\n"

    if users_in_room_show:
        message += f"–°–ø–∏—Å–æ–∫ –∂–∏—Ç–µ–ª–µ–π ({len(users_in_room_show)} —á–µ–ª.):\n"
        for i, (user_id_list, username_list) in enumerate(users_in_room_show, 1): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
            message += f"{i}. üë§ {username_list}\n"
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" # –ò–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏—Ç–µ–ª—è–º–∏
        keyboard = []
        for user_id_btn, username_btn in users_in_room_show: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
            keyboard.append([InlineKeyboardButton(
                f"üë§ {username_btn}",
                callback_data=f"manage_resident_{user_id_btn}"
            )])

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç", callback_data="list_residents")])

        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        message += "–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π."

        # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç", callback_data="list_residents")]]

        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_resident_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, resident_user_id: int): # user_id –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–º"""
    query = update.callback_query

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    room_id_resident = get_user_room_id(resident_user_id) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    room_number_resident = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    username_resident = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {resident_user_id}" # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è

    if room_id_resident:
        room_details_resident = get_room_details(room_id_resident) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        if room_details_resident:
            room_number_resident = room_details_resident[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
        users_in_room_resident = get_users_by_room(room_id_resident) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        for u_id, u_name in users_in_room_resident:
            if u_id == resident_user_id:
                username_resident = u_name
                break

    message = f"üë§ –ñ–∏—Ç–µ–ª—å: {username_resident}\nüõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room_number_resident}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    context.user_data['resident_user_id_manage'] = resident_user_id # –ò–∑–º–µ–Ω–∏–ª –∫–ª—é—á

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∂–∏—Ç–µ–ª–µ–π —Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    # room_id_resident - —ç—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∂–∏—Ç–µ–ª—è.
    back_callback = f"show_room_residents_{room_id_resident}" if room_id_resident else "list_residents"


    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        # [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="change_resident_room")], # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫:
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data=f"change_resident_room_{resident_user_id}")],
        # [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∂–∏—Ç–µ–ª—è", callback_data="confirm_delete_resident")], # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ:
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∂–∏—Ç–µ–ª—è", callback_data=f"confirm_delete_resident_{resident_user_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ]

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def change_resident_room(update: Update, context: ContextTypes.DEFAULT_TYPE): # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å user_id –≤ callback_data
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è"""
    query = update.callback_query
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    resident_user_id_change = None
    if query.data.startswith("change_resident_room_"):
        try:
            resident_user_id_change = int(query.data.split("_")[-1])
            context.user_data['resident_user_id_manage'] = resident_user_id_change # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        except ValueError:
            pass # –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID

    if not resident_user_id_change: # –ï—Å–ª–∏ ID –Ω–µ –±—ã–ª –≤ callback_data, –±–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        resident_user_id_change = context.user_data.get('resident_user_id_manage')


    current_elder_block_id = context.user_data.get('elder_block_id')

    if not resident_user_id_change or not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏—Ç–µ–ª–µ –∏–ª–∏ –±–ª–æ–∫–µ.",
            reply_markup=get_back_button("list_residents")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –∂–∏—Ç–µ–ª—è
    current_room_id_resident = get_user_room_id(resident_user_id_change)
    current_room_number_resident = "–ù–µ—Ç"
    if current_room_id_resident:
        room_details_current = get_room_details(current_room_id_resident)
        if room_details_current:
            current_room_number_resident = room_details_current[0]

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ get_user, –Ω–æ —Ä–∞–∑ —É–∂ –º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–º–Ω–∞—Ç—ã...
    username_change = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {resident_user_id_change}"
    if current_room_id_resident:
        users_in_current_room = get_users_by_room(current_room_id_resident)
        for u_id, u_name in users_in_current_room:
            if u_id == resident_user_id_change:
                username_change = u_name
                break
    else: # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        user_data_db = context.bot_data.get('db_get_user_function', lambda x: (None, f"User {x}", None, None))(resident_user_id_change) # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        if user_data_db and user_data_db[1]:
            username_change = user_data_db[1]


    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã
    rooms_in_block_change = get_rooms_by_block(current_elder_block_id)

    if not rooms_in_block_change:
        await query.edit_message_text(
            "–í –≤–∞—à–µ–º –±–ª–æ–∫–µ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è.",
            reply_markup=get_back_button(f"manage_resident_{resident_user_id_change}") # –ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å —ç—Ç–∏–º –∂–∏—Ç–µ–ª–µ–º
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    keyboard = []

    for room_id_btn_change, room_number_btn_change in rooms_in_block_change:
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
        if room_id_btn_change == current_room_id_resident:
            room_label = f"üîµ –ö–æ–º–Ω–∞—Ç–∞ {room_number_btn_change} (–¢–µ–∫—É—â–∞—è)"
        else:
            room_label = f"‚ö™ –ö–æ–º–Ω–∞—Ç–∞ {room_number_btn_change}"

        keyboard.append([InlineKeyboardButton(
            room_label,
            callback_data=f"set_resident_room_{resident_user_id_change}_{room_id_btn_change}" # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ ID
        )])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥",
        callback_data=f"manage_resident_{resident_user_id_change}" # –ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å —ç—Ç–∏–º –∂–∏—Ç–µ–ª–µ–º
    )])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã\n\n"
    message += f"–ñ–∏—Ç–µ–ª—å: üë§ {username_change}\n"
    message += f"–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: üõèÔ∏è {current_room_number_resident}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∂–∏—Ç–µ–ª—è:"

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_resident_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–º–Ω–∞—Ç—É –∂–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    query = update.callback_query
    callback_data = query.data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    parts = callback_data.split('_')
    user_id_set = int(parts[-2])
    new_room_id_set = int(parts[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
    old_room_id_set = get_user_room_id(user_id_set)
    old_room_number_set = "–ù–µ—Ç"
    if old_room_id_set:
        room_details_old = get_room_details(old_room_id_set)
        if room_details_old:
            old_room_number_set = room_details_old[0]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    new_room_number_set = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    room_details_new = get_room_details(new_room_id_set)
    if room_details_new:
        new_room_number_set = room_details_new[0]

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å telegram username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    username_set = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_set}"
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å query.from_user (–¥–ª—è callback) –∏–ª–∏ update.effective_user
    effective_user_to_get_name = query.from_user if query else update.effective_user
    if effective_user_to_get_name and effective_user_to_get_name.id == user_id_set: # –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
         username_set = effective_user_to_get_name.username or effective_user_to_get_name.first_name
    else: # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–¥–æ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏–∑ –ë–î
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_user(user_id_set)
        # user_db_info = get_user(user_id_set)
        # if user_db_info: username_set = user_db_info[1]
        pass # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = update_user_room(user_id_set, new_room_id_set)

    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã\n\n"
            notification_text += "–í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.\n\n"
            notification_text += f"–°—Ç–∞—Ä–∞—è –∫–æ–º–Ω–∞—Ç–∞: {old_room_number_set}\n"
            notification_text += f"–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: {new_room_number_set}"

            await context.bot.send_message(chat_id=user_id_set, text=notification_text)
            notification_sent_msg = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–∏—Ç–µ–ª—é."
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_set}: {str(e)}")
            notification_sent_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–∏—Ç–µ–ª—é."


        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç–µ
        success_message = "‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.\n\n"
        success_message += f"–ñ–∏—Ç–µ–ª—å: {username_set}\n"
        success_message += f"–°—Ç–∞—Ä–∞—è –∫–æ–º–Ω–∞—Ç–∞: {old_room_number_set}\n"
        success_message += f"–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: {new_room_number_set}\n\n"
        success_message += notification_sent_msg

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç
        await query.edit_message_text(
            success_message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç",
                callback_data="list_residents"
            )]])
        )

    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=f"manage_resident_{user_id_set}"
            )]])
        )

async def confirm_delete_resident(update: Update, context: ContextTypes.DEFAULT_TYPE): # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å user_id –≤ callback_data
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è"""
    query = update.callback_query
    resident_user_id_confirm = None
    if query.data.startswith("confirm_delete_resident_"):
        try:
            resident_user_id_confirm = int(query.data.split("_")[-1])
            context.user_data['resident_user_id_manage'] = resident_user_id_confirm
        except ValueError:
            pass

    if not resident_user_id_confirm:
        resident_user_id_confirm = context.user_data.get('resident_user_id_manage')


    if not resident_user_id_confirm:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏—Ç–µ–ª–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_back_button("list_residents")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    room_id_confirm = get_user_room_id(resident_user_id_confirm)
    room_number_confirm = "–ù–µ—Ç"
    username_confirm = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {resident_user_id_confirm}"

    if room_id_confirm:
        room_details_confirm = get_room_details(room_id_confirm)
        if room_details_confirm:
            room_number_confirm = room_details_confirm[0]

        users_in_room_confirm = get_users_by_room(room_id_confirm)
        for u_id, u_name in users_in_room_confirm:
            if u_id == resident_user_id_confirm:
                username_confirm = u_name
                break
    else: # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username
        # user_data_db_confirm = get_user(resident_user_id_confirm)
        # if user_data_db_confirm: username_confirm = user_data_db_confirm[1]
        pass


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
    message += f"–ñ–∏—Ç–µ–ª—å: üë§ {username_confirm}\n"
    message += f"–ö–æ–º–Ω–∞—Ç–∞: üõèÔ∏è {room_number_confirm}\n\n"
    message += "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∂–∏—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã?\n"
    message += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_resident_{resident_user_id_confirm}")], # –ü–µ—Ä–µ–¥–∞–µ–º ID
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_resident_{resident_user_id_confirm}")] # –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –∂–∏—Ç–µ–ª–µ–º
    ]

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_resident(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∂–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    query = update.callback_query
    callback_data = query.data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    user_id_delete = int(callback_data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    room_id_delete = get_user_room_id(user_id_delete)
    room_number_delete = "–ù–µ—Ç"
    username_delete = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_delete}"

    if room_id_delete:
        room_details_delete = get_room_details(room_id_delete)
        if room_details_delete:
            room_number_delete = room_details_delete[0]

        users_in_room_delete = get_users_by_room(room_id_delete)
        for u_id, u_name in users_in_room_delete:
            if u_id == user_id_delete:
                username_delete = u_name
                break
    else: # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã
        # user_data_db_delete = get_user(user_id_delete)
        # if user_data_db_delete: username_delete = user_data_db_delete[1]
        pass


    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        notification_text = f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã\n\n"
        notification_text += "–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞.\n\n"
        if room_number_delete != "–ù–µ—Ç":
            notification_text += f"–ö–æ–º–Ω–∞—Ç–∞: {room_number_delete}\n\n"
        notification_text += "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –≤–∞—à–µ–≥–æ –±–ª–æ–∫–∞."

        await context.bot.send_message(chat_id=user_id_delete, text=notification_text)
        notification_sent_msg_del = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_delete}: {str(e)}")
        notification_sent_msg_del = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã/–±–ª–æ–∫–∞?)
    # –¢–µ–∫—É—â–∞—è delete_user —É–¥–∞–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã.
    # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ä–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ "–æ—Ç–∫—Ä–µ–ø–∏—Ç—å" –æ—Ç –∫–æ–º–Ω–∞—Ç—ã.
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º delete_user.
    delete_user(user_id_delete) # –≠—Ç–æ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    result_message = "‚úÖ –ñ–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
    result_message += f"–ñ–∏—Ç–µ–ª—å: {username_delete}\n"
    if room_number_delete != "–ù–µ—Ç":
        result_message += f"–ö–æ–º–Ω–∞—Ç–∞: {room_number_delete}\n\n"
    result_message += notification_sent_msg_del

    await query.edit_message_text(
        result_message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç",
            callback_data="list_residents"
        )]])
    )

async def confirm_remove_resident(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id_confirm_remove: int): # user_id –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_resident_actions_menu)"""
    query = update.callback_query

    await query.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∂–∏—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirmation_menu("remove_resident_final", user_id_confirm_remove) # –ò–∑–º–µ–Ω–∏–ª action –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    )

async def remove_resident(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id_remove_final: int): # user_id –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
    """–£–¥–∞–ª—è–µ—Ç –∂–∏—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ confirm_remove_resident)"""
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ callback_data = "confirm_remove_resident_final_USERID"
    query = update.callback_query

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete_user(user_id_remove_final)

    await query.edit_message_text(
        "‚úÖ –ñ–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=get_back_button("list_residents") # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç/–∂–∏—Ç–µ–ª–µ–π
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç
async def request_room_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"""
    query = update.callback_query
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("elder_panel")
        )
        return

    context.user_data['awaiting_room_range'] = True

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 101-110 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 101 –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã):",
        reply_markup=get_back_button("elder_panel")
    )

async def process_room_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–º–Ω–∞—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—ã"""
    # user_id = update.effective_user.id # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
    room_range_text = update.message.text
    current_elder_block_id = context.user_data.get('elder_block_id')

    if not current_elder_block_id:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –±–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_elder_panel()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –æ–∂–∏–¥–∞–µ–º "N-M", –≥–¥–µ N –∏ M - —á–∏—Å–ª–∞, –∏–ª–∏ "N"
    try:
        if '-' in room_range_text:
            # –§–æ—Ä–º–∞—Ç "N-M"
            start_num_str, end_num_str = room_range_text.split('-', 1)
            start_num = int(start_num_str.strip())
            end_num = int(end_num_str.strip())
        else:
            # –§–æ—Ä–º–∞—Ç –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
            start_num = end_num = int(room_range_text.strip())

        if start_num <= 0 or end_num <= 0:
             await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.",
                reply_markup=get_elder_panel()
            )
             return

        if start_num > end_num: # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
            start_num, end_num = end_num, start_num

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        if end_num - start_num + 1 > 50: # +1 —Ç.–∫. –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π
            await update.message.reply_text(
                "‚ùå –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–Ω–∞—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Ä–∞–∑ - 50 –∫–æ–º–Ω–∞—Ç.",
                reply_markup=get_elder_panel()
            )
            return

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –±–ª–æ–∫–µ –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        # –≠—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –∞ –Ω–µ –∑–∞–º–µ–Ω—è—Ç—å, —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞–¥–æ —É–±—Ä–∞—Ç—å.
        delete_rooms_in_block(current_elder_block_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        created_rooms_numbers = [] # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç

        for room_number_create in range(start_num, end_num + 1):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
            new_room_id_create = add_room(current_elder_block_id, room_number_create)
            if new_room_id_create:
                created_rooms_numbers.append(str(room_number_create)) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è join

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if created_rooms_numbers:
            message = f"‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –±–ª–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–Ω–∞—Ç—ã: {', '.join(created_rooms_numbers)}"
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ delete_rooms_in_block —Å—Ä–∞–±–æ—Ç–∞–ª, –∞ add_room –Ω–µ—Ç,
            # –∏–ª–∏ –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –±—ã–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ö–æ—Ç—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ)
            message = "‚ùå –ö–æ–º–Ω–∞—Ç—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ï—Å–ª–∏ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã, –∞ –Ω–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

        await update.message.reply_text(
            message,
            reply_markup=get_elder_panel()
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '101-110' –∏–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.",
            reply_markup=get_elder_panel()
        )