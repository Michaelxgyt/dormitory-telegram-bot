from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import (
    get_all_dormitories, 
    get_floors_by_dorm, 
    get_blocks_by_floor, 
    get_rooms_by_block,
    get_room_details,
    add_user,
    update_user_room,
    get_user_duties,
    get_user_room_id
)
from keyboards import (
    get_main_menu,
    get_dormitory_menu,
    get_floor_menu,
    get_block_menu,
    get_room_menu,
    get_room_confirmation_menu,
    get_schedule_menu,
    get_back_button,
    get_other_options_menu
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
async def handle_student_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    callback_data = query.data
    user_id = update.effective_user.id
    
    # –í—ã–±–æ—Ä –æ–±—â–µ–∂–∏—Ç–∏—è, —ç—Ç–∞–∂–∞, –±–ª–æ–∫–∞, –∫–æ–º–Ω–∞—Ç—ã
    if callback_data == "select_room":
        await select_dormitory(update, context)
    elif callback_data.startswith("dorm_"):
        dorm_id = int(callback_data.split("_")[1])
        context.user_data['selected_dorm_id'] = dorm_id
        await select_floor(update, context)
    elif callback_data.startswith("floor_"):
        floor_id = int(callback_data.split("_")[1])
        context.user_data['selected_floor_id'] = floor_id
        await select_block(update, context)
    elif callback_data.startswith("block_"):
        block_id = int(callback_data.split("_")[1])
        context.user_data['selected_block_id'] = block_id
        await select_room(update, context)
    elif callback_data.startswith("room_"):
        room_id = int(callback_data.split("_")[1])
        context.user_data['selected_room_id'] = room_id
        await confirm_room_selection(update, context)
    elif callback_data.startswith("confirm_room_"):
        room_id = int(callback_data.split("_")[2])
        await save_room_selection(update, context, room_id)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elif callback_data == "back_to_floors":
        await select_floor(update, context)
    elif callback_data == "back_to_blocks":
        await select_block(update, context)
    elif callback_data == "select_dorm":
        await select_dormitory(update, context)
    elif callback_data == "back_to_panel" or callback_data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
        user_id = update.effective_user.id
        has_room = get_user_room_id(user_id) is not None
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['has_room'] = has_room
        context.user_data.pop('duty_page', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–∂—É—Ä—Å—Ç–≤
        
        # –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ –º–µ–Ω—é –¥–µ–∂—É—Ä—Å—Ç–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        username = update.effective_user.username or update.effective_user.first_name
        room_id = get_user_room_id(user_id)
        
        if room_id:
            room_details = get_room_details(room_id)
            if room_details:
                room_number, block_number, floor_number, dorm_name = room_details
                message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n"
                message += f"üè† –í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_number} (–ë–ª–æ–∫ {block_number}, –≠—Ç–∞–∂ {floor_number}, {dorm_name})\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            else:
                message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(
            message,
            reply_markup=get_main_menu('student', has_room)
        )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤
    elif callback_data == "my_duties":
        await show_my_duties(update, context)
    elif callback_data.startswith("schedule_"):
        action = callback_data.split("_")[1]
        if action == "prev":
            context.user_data['duty_page'] = max(0, context.user_data.get('duty_page', 0) - 1)
        elif action == "next":
            context.user_data['duty_page'] = context.user_data.get('duty_page', 0) + 1
        await show_my_duties(update, context)
    
    # –ú–µ–Ω—é "–ü—Ä–æ—á–µ–µ"
    elif callback_data == "other_options":
        await show_other_options(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞
async def handle_student_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    # –í –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    # –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_menu('student', context.user_data.get('has_room', False))
    )

# –í—ã–±–æ—Ä –æ–±—â–µ–∂–∏—Ç–∏—è
async def select_dormitory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—â–µ–∂–∏—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    query = update.callback_query
    
    dormitories = get_all_dormitories()
    
    if not dormitories:
        await query.edit_message_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—â–µ–∂–∏—Ç–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button()
        )
        return
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–µ–∂–∏—Ç–∏–µ:",
        reply_markup=get_dormitory_menu(dormitories)
    )

# –í—ã–±–æ—Ä —ç—Ç–∞–∂–∞
async def select_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–∂–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—â–µ–∂–∏—Ç–∏—è"""
    query = update.callback_query
    dorm_id = context.user_data.get('selected_dorm_id')
    
    if not dorm_id:
        await select_dormitory(update, context)
        return
    
    floors = get_floors_by_dorm(dorm_id)
    
    if not floors:
        await query.edit_message_text(
            "–í —ç—Ç–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–∂–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("select_dorm")
        )
        return
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:",
        reply_markup=get_floor_menu(floors, dorm_id)
    )

# –í—ã–±–æ—Ä –±–ª–æ–∫–∞
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–∂–∞"""
    query = update.callback_query
    floor_id = context.user_data.get('selected_floor_id')
    
    if not floor_id:
        await select_floor(update, context)
        return
    
    blocks = get_blocks_by_floor(floor_id)
    
    if not blocks:
        await query.edit_message_text(
            "–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–∂–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("back_to_floors")
        )
        return
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:",
        reply_markup=get_block_menu(blocks, floor_id)
    )

# –í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
async def select_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
    query = update.callback_query
    block_id = context.user_data.get('selected_block_id')
    
    if not block_id:
        await select_block(update, context)
        return
    
    rooms = get_rooms_by_block(block_id)
    
    if not rooms:
        await query.edit_message_text(
            "–í —ç—Ç–æ–º –±–ª–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button("back_to_blocks")
        )
        return
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:",
        reply_markup=get_room_menu(rooms, block_id)
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
async def confirm_room_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    query = update.callback_query
    room_id = context.user_data.get('selected_room_id')
    
    if not room_id:
        await select_room(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    room_details = get_room_details(room_id)
    
    if not room_details:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É.",
            reply_markup=get_back_button("back_to_blocks")
        )
        return
    
    room_number, block_number, floor_number, dorm_name = room_details
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
    current_room_id = get_user_room_id(update.effective_user.id)
    is_change = current_room_id is not None
    
    message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
    message += f"üè† –û–±—â–µ–∂–∏—Ç–∏–µ: {dorm_name}\n"
    message += f"üî¢ –≠—Ç–∞–∂: {floor_number}\n"
    message += f"üö™ –ë–ª–æ–∫: {block_number}\n"
    message += f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room_number}\n\n"
    
    if is_change:
        message += "–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ —ç—Ç—É?"
    else:
        message += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä?"
    
    await query.edit_message_text(
        message,
        reply_markup=get_room_confirmation_menu(room_id, is_change)
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
async def save_room_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, room_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    room_details = get_room_details(room_id)
    
    if not room_details:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_back_button()
        )
        return
    
    room_number, block_number, floor_number, dorm_name = room_details
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    current_room_id = get_user_room_id(user_id)
    
    if current_room_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_room(user_id, room_id)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        add_user(user_id, username, room_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–Ω–∞—Ç—ã
    context.user_data['has_room'] = True
    
    await query.edit_message_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ {current_room_id and '–∏–∑–º–µ–Ω–∏–ª–∏' or '–≤—ã–±—Ä–∞–ª–∏'} –∫–æ–º–Ω–∞—Ç—É:\n\n"
        f"üè† –û–±—â–µ–∂–∏—Ç–∏–µ: {dorm_name}\n"
        f"üî¢ –≠—Ç–∞–∂: {floor_number}\n"
        f"üö™ –ë–ª–æ–∫: {block_number}\n"
        f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room_number}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.",
        reply_markup=get_main_menu('student', True)
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_my_duties(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    room_id = get_user_room_id(user_id)
    room_details = get_room_details(room_id) if room_id else None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä—Å—Ç–≤
    duties = get_user_duties(user_id)
    
    if not duties:
        await query.edit_message_text(
            "üóìÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–∂—É—Ä—Å—Ç–≤.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –±–ª–æ–∫–∞.",
            reply_markup=get_back_button("back_to_main")
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = context.user_data.get('duty_page', 0)
    items_per_page = 5
    total_pages = (len(duties) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    if page >= total_pages:
        page = 0
        context.user_data['duty_page'] = 0
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(duties))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –∏ –±–ª–æ–∫–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    room_info = ""
    if room_details:
        room_number, block_number, floor_number, dorm_name = room_details
        room_info = f"\nüè† –û–±—â–µ–∂–∏—Ç–∏–µ: {dorm_name}\n"
        room_info += f"üî¢ –≠—Ç–∞–∂: {floor_number}\n"
        room_info += f"üö™ –ë–ª–æ–∫: {block_number}\n"
        room_info += f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room_number}\n"
    
    message = "üóìÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö{room_info}\n\n–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞:\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –Ω–µ–¥–µ–ª–∏
    from datetime import datetime
    for date, completed in duties[start_idx:end_idx]:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
        try:
            date_obj = datetime.strptime(date, '%Y-%m-%d')
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            weekday = weekdays[date_obj.weekday()]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            formatted_date = date_obj.strftime('%d.%m.%Y')
        except:
            weekday = ""
            formatted_date = date
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞
        if completed:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
            today = datetime.now().strftime('%Y-%m-%d')
            if date == today:
                status = "üî• –°–µ–≥–æ–¥–Ω—è"
            else:
                status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è"
        
        message += f"‚Ä¢ {formatted_date} ({weekday}): {status}\n"
    
    message += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    message += "‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –±–ª–æ–∫–∞."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    nav_row = []
    
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="schedule_prev"))
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="schedule_next"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_other_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ (–≤—Ö–æ–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–æ–ª–∏)"""
    query = update.callback_query
    
    await query.edit_message_text(
        "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏:",
        reply_markup=get_other_options_menu()
    )
