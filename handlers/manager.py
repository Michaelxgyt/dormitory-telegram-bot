from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import MANAGER_PASSWORD
from database import (
    update_user_role,
    get_user_role,
    get_all_dormitories,
    add_dormitory,
    delete_dormitory,
    get_floors_by_dorm,
    add_floor,
    delete_floor,
    get_blocks_by_floor,
    add_block,
    delete_block,
    update_block_password,
    get_block_password,
    is_password_used,
    get_rooms_by_block,
    get_block_elders
)
from keyboards import (
    get_manager_panel,
    get_manage_dormitories_menu,
    get_manage_floors_menu,
    get_manage_blocks_menu,
    get_back_button
)

# –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
async def request_manager_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ"""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    context.user_data['awaiting_manager_password'] = True
    
    await query.edit_message_text(
        "üîê –î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=get_back_button()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
async def handle_manager_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    context.user_data['awaiting_manager_password'] = False
    
    user_id = update.effective_user.id
    entered_password = update.message.text
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await update.message.delete()
    except Exception as e:
        # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º: {str(e)}")
        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    if entered_password == MANAGER_PASSWORD:
        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å 'manager'
        update_user_role(user_id, 'manager')
        context.user_data['role'] = 'manager'
        
        await update.message.reply_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ –∑–∞–≤–µ–¥—É—é—â–∏–π.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–µ–∂–∏—Ç–∏—è–º–∏, —ç—Ç–∞–∂–∞–º–∏ –∏ –±–ª–æ–∫–∞–º–∏.",
            reply_markup=get_manager_panel()
        )
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_button()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
async def handle_manager_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–ª–∏ –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ"""
    query = update.callback_query
    callback_data = query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç —Ä–æ–ª—å –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'manager' and context.user_data.get('role') != 'manager':
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ.",
            reply_markup=get_back_button()
        )
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
    if callback_data == "manager_panel":
        await show_manager_panel(update, context)
    elif callback_data == "manage_dormitories":
        await show_dormitories(update, context)
    elif callback_data == "manage_floors":
        dorm_id = context.user_data.get('current_dorm_id')
        if dorm_id:
            await show_dorm_floors(update, context, dorm_id)
        else:
            await show_dormitories(update, context)
    elif callback_data == "add_dormitory":
        await request_dormitory_name(update, context)
    elif callback_data.startswith("edit_dorm_"):
        dorm_id = int(callback_data.split("_")[2])
        context.user_data['current_dorm_id'] = dorm_id
        await show_dorm_floors(update, context, dorm_id)
    elif callback_data.startswith("add_floor_"):
        dorm_id = int(callback_data.split("_")[2])
        await request_floor_number(update, context, dorm_id)
    elif callback_data.startswith("edit_floor_"):
        floor_id = int(callback_data.split("_")[2])
        await show_floor_blocks(update, context, floor_id)
    elif callback_data.startswith("add_block_"):
        floor_id = int(callback_data.split("_")[2])
        await request_block_info(update, context, floor_id)
    elif callback_data.startswith("edit_block_"):
        block_id = int(callback_data.split("_")[2])
        await show_block_info(update, context, block_id)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    elif callback_data == "select_dorm_to_delete":
        await select_dormitory_to_delete(update, context)
    elif callback_data == "select_floor_to_delete":
        await select_floor_to_delete(update, context)
    elif callback_data == "select_block_to_delete":
        await select_block_to_delete(update, context)
    elif callback_data.startswith("confirm_delete_dorm_"):
        dorm_id = int(callback_data.split("_")[3])
        await confirm_delete_dormitory(update, context, dorm_id)
    elif callback_data.startswith("delete_dorm_"):
        dorm_id = int(callback_data.split("_")[2])
        await delete_dormitory_handler(update, context, dorm_id)
    elif callback_data.startswith("confirm_delete_floor_"):
        floor_id = int(callback_data.split("_")[3])
        await confirm_delete_floor(update, context, floor_id)
    elif callback_data.startswith("delete_floor_"):
        floor_id = int(callback_data.split("_")[2])
        await delete_floor_handler(update, context, floor_id)
    elif callback_data.startswith("confirm_delete_block_"):
        block_id = int(callback_data.split("_")[3])
        await confirm_delete_block(update, context, block_id)
    elif callback_data.startswith("delete_block_"):
        block_id = int(callback_data.split("_")[2])
        await delete_block_handler(update, context, block_id)
    elif callback_data == "change_block_password":
        block_id = context.user_data.get('current_block_id')
        if block_id:
            await request_new_block_password(update, context, block_id)
    elif callback_data == "view_all_schedules":
        await show_all_schedules(update, context)
    elif callback_data == "manage_elders":
        await manage_elders(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
async def handle_manager_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç —Ä–æ–ª—å –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
    if get_user_role(user_id) != 'manager' and context.user_data.get('role') != 'manager':
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ.",
            reply_markup=get_back_button()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if context.user_data.get('awaiting_dormitory_name'):
        await handle_dormitory_name(update, context)
    elif context.user_data.get('awaiting_floor_number'):
        await handle_floor_number(update, context)
    elif context.user_data.get('awaiting_block_number'):
        await handle_block_number(update, context)
    elif context.user_data.get('awaiting_block_password'):
        await handle_block_password(update, context)
    elif context.user_data.get('awaiting_new_block_password'):
        await handle_new_block_password(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_manager_panel()
        )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ
async def show_manager_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ"""
    query = update.callback_query
    await query.edit_message_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–µ–∂–∏—Ç–∏—è–º–∏, —ç—Ç–∞–∂–∞–º–∏, –±–ª–æ–∫–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç.",
        reply_markup=get_manager_panel()
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–∂–∏—Ç–∏—è–º–∏
async def show_dormitories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—â–µ–∂–∏—Ç–∏–π"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—â–µ–∂–∏—Ç–∏–π
    dormitories = get_all_dormitories()
    
    if not dormitories:
        await query.edit_message_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—â–µ–∂–∏—Ç–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ.",
            reply_markup=get_manage_dormitories_menu([])
        )
        return
    
    await query.edit_message_text(
        "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–µ–∂–∏—Ç–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=get_manage_dormitories_menu(dormitories)
    )

async def request_dormitory_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–∂–∏—Ç–∏—è"""
    query = update.callback_query
    context.user_data['awaiting_dormitory_name'] = True
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–∂–∏—Ç–∏—è:",
        reply_markup=get_back_button("manage_dormitories")
    )

async def confirm_delete_dormitory(update: Update, context: ContextTypes.DEFAULT_TYPE, dorm_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—â–µ–∂–∏—Ç–∏—è"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–∂–∏—Ç–∏–∏
    dormitories = get_all_dormitories()
    dorm_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ"
    
    for d_id, name in dormitories:
        if d_id == dorm_id:
            dorm_name = name
            break
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_dorm_{dorm_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_dormitories")]
    ]
    
    await query.edit_message_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—â–µ–∂–∏—Ç–∏–µ '{dorm_name}'?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —ç—Ç–∞–∂–∏, –±–ª–æ–∫–∏ –∏ –∫–æ–º–Ω–∞—Ç—ã –≤ —ç—Ç–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_dormitory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, dorm_id: int):
    """–£–¥–∞–ª—è–µ—Ç –æ–±—â–µ–∂–∏—Ç–∏–µ"""
    query = update.callback_query
    
    # –£–¥–∞–ª—è–µ–º –æ–±—â–µ–∂–∏—Ç–∏–µ
    result = delete_dormitory(dorm_id)
    
    if result:
        await query.edit_message_text(
            "‚úÖ –û–±—â–µ–∂–∏—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=get_back_button("manage_dormitories")
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—â–µ–∂–∏—Ç–∏—è.",
            reply_markup=get_back_button("manage_dormitories")
        )

async def handle_dormitory_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_dormitory_name'] = False
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    dorm_name = update.message.text.strip()
    
    if not dorm_name:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_manager_panel()
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    dorm_id = add_dormitory(dorm_name)
    
    if dorm_id:
        await update.message.reply_text(
            f"‚úÖ –û–±—â–µ–∂–∏—Ç–∏–µ '{dorm_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–∂–∏ –≤ —ç—Ç–æ –æ–±—â–µ–∂–∏—Ç–∏–µ.",
            reply_markup=get_manager_panel()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—â–µ–∂–∏—Ç–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_manager_panel()
        )

async def handle_floor_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_floor_number'] = False
    dorm_id = context.user_data.get('target_dorm_id')
    
    try:
        floor_number = int(update.message.text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–∂
        floor_id = add_floor(dorm_id, floor_number)
        
        if floor_id:
            await update.message.reply_text(
                f"‚úÖ –≠—Ç–∞–∂ {floor_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —ç—Ç–∞–∂.",
                reply_markup=get_manager_panel()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–∞–∂–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π —ç—Ç–∞–∂ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=get_manager_panel()
            )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_manager_panel()
        )

async def handle_block_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_block_number'] = False
    floor_id = context.user_data.get('target_floor_id')
    block_number = update.message.text.strip()
    
    if not block_number:
        await update.message.reply_text(
            "‚ùå –ù–æ–º–µ—Ä –±–ª–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_manager_panel()
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è –¥–ª—è –±–ª–æ–∫–∞
    context.user_data['temp_block_number'] = block_number
    context.user_data['awaiting_block_password'] = True
    
    floor_id = context.user_data.get('target_floor_id')
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –±–ª–æ–∫–∞ {block_number}.\n"
        "–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=get_back_button(f"edit_floor_{floor_id}")
    )

async def handle_block_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–ª–æ–∫–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_block_password'] = False
    floor_id = context.user_data.get('target_floor_id')
    block_number = context.user_data.get('temp_block_number')
    block_password = update.message.text.strip()
    
    if not block_password:
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª—å –±–ª–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_manager_panel()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –≤ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–∞—Ö
    if is_password_used(block_password):
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –±–ª–æ–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞.",
            reply_markup=get_manager_panel()
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
    block_id = add_block(floor_id, block_number, block_password)
    
    if block_id:
        await update.message.reply_text(
            f"‚úÖ –ë–ª–æ–∫ {block_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n"
            f"–ü–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã: {block_password}\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–æ–±—â–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–µ –±–ª–æ–∫–∞.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã –≤ —ç—Ç–æ—Ç –±–ª–æ–∫.",
            reply_markup=get_manager_panel()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –±–ª–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_manager_panel()
        )

async def handle_new_block_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–ª–æ–∫–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_new_block_password'] = False
    block_id = context.user_data.get('target_block_id')
    new_password = update.message.text.strip()
    
    if not new_password:
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª—å –±–ª–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_manager_panel()
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –±–ª–æ–∫–∞
    update_block_password(block_id, new_password)
    
    await update.message.reply_text(
        f"‚úÖ –ü–∞—Ä–æ–ª—å –±–ª–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_password}\n\n"
        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–µ –±–ª–æ–∫–∞.",
        reply_markup=get_manager_panel()
    )

async def handle_room_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_room_number'] = False
    block_id = context.user_data.get('target_block_id')
    
    try:
        room_number = int(update.message.text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
        room_id = add_room(block_id, room_number)
        
        if room_id:
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ {room_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                reply_markup=get_manager_panel()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=get_manager_panel()
            )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_manager_panel()
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–∞–º–∏
async def show_dorm_floors(update: Update, context: ContextTypes.DEFAULT_TYPE, dorm_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–∂–µ–π –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏"""
    query = update.callback_query
    context.user_data['current_dorm_id'] = dorm_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–∂–µ–π
    floors = get_floors_by_dorm(dorm_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è
    dormitories = get_all_dormitories()
    dorm_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ"
    
    for d_id, name in dormitories:
        if d_id == dorm_id:
            dorm_name = name
            break
    
    if not floors:
        await query.edit_message_text(
            f"üè¢ –û–±—â–µ–∂–∏—Ç–∏–µ: {dorm_name}\n\n"
            "–í —ç—Ç–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —ç—Ç–∞–∂–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂.",
            reply_markup=get_manage_floors_menu([], dorm_id)
        )
        return
    
    await query.edit_message_text(
        f"üè¢ –û–±—â–µ–∂–∏—Ç–∏–µ: {dorm_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=get_manage_floors_menu(floors, dorm_id)
    )

async def request_floor_number(update: Update, context: ContextTypes.DEFAULT_TYPE, dorm_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–∂–∞"""
    query = update.callback_query
    context.user_data['awaiting_floor_number'] = True
    context.user_data['target_dorm_id'] = dorm_id
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–∂–∞ (—á–∏—Å–ª–æ):",
        reply_markup=get_back_button("manage_dormitories")
    )

async def confirm_delete_floor(update: Update, context: ContextTypes.DEFAULT_TYPE, floor_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–∞–∂–∞"""
    query = update.callback_query
    dorm_id = context.user_data.get('current_dorm_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ
    floors = get_floors_by_dorm(dorm_id)
    floor_number = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    for f_id, number in floors:
        if f_id == floor_id:
            floor_number = number
            break
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_floor_{floor_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_dorm_{dorm_id}")]
    ]
    
    await query.edit_message_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∞–∂ {floor_number}?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –±–ª–æ–∫–∏ –∏ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–∂–µ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_floor_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, floor_id: int):
    """–£–¥–∞–ª—è–µ—Ç —ç—Ç–∞–∂"""
    query = update.callback_query
    dorm_id = context.user_data.get('current_dorm_id')
    
    # –£–¥–∞–ª—è–µ–º —ç—Ç–∞–∂
    result = delete_floor(floor_id)
    
    if result:
        await query.edit_message_text(
            "‚úÖ –≠—Ç–∞–∂ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_back_button(f"edit_dorm_{dorm_id}")
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–∞–∂–∞.",
            reply_markup=get_back_button(f"edit_dorm_{dorm_id}")
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏
async def show_floor_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE, floor_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –Ω–∞ —ç—Ç–∞–∂–µ"""
    query = update.callback_query
    context.user_data['current_floor_id'] = floor_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤
    blocks = get_blocks_by_floor(floor_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ
    dorm_id = context.user_data.get('current_dorm_id')
    floors = get_floors_by_dorm(dorm_id)
    floor_number = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    for f_id, number in floors:
        if f_id == floor_id:
            floor_number = number
            break
    
    if not blocks:
        await query.edit_message_text(
            f"üî¢ –≠—Ç–∞–∂: {floor_number}\n\n"
            "–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–∂–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–æ–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫.",
            reply_markup=get_manage_blocks_menu(blocks, floor_id)
        )
        return
    
    await query.edit_message_text(
        f"üî¢ –≠—Ç–∞–∂: {floor_number}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=get_manage_blocks_menu(blocks, floor_id)
    )

async def request_block_info(update: Update, context: ContextTypes.DEFAULT_TYPE, floor_id: int):
    query = update.callback_query
    context.user_data['awaiting_block_number'] = True
    context.user_data['target_floor_id'] = floor_id
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞:",
        reply_markup=get_back_button(f"edit_floor_{floor_id}")
    )

async def confirm_delete_block(update: Update, context: ContextTypes.DEFAULT_TYPE, block_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞"""
    query = update.callback_query
    floor_id = context.user_data.get('current_floor_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –±–ª–æ–∫–µ
    blocks = get_blocks_by_floor(floor_id)
    block_number = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    for b_id, number in blocks:
        if b_id == block_id:
            block_number = number
            break
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_block_{block_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_floor_{floor_id}")]
    ]
    
    await query.edit_message_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ {block_number}?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_block_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, block_id: int):
    """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫"""
    query = update.callback_query
    floor_id = context.user_data.get('current_floor_id')
    
    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫
    result = delete_block(block_id)
    
    if result:
        await query.edit_message_text(
            "‚úÖ –ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_back_button(f"edit_floor_{floor_id}")
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞.",
            reply_markup=get_back_button(f"edit_floor_{floor_id}")
        )

async def show_block_info(update: Update, context: ContextTypes.DEFAULT_TYPE, block_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ"""
    query = update.callback_query
    floor_id = context.user_data.get('current_floor_id')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –±–ª–æ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_block_id'] = block_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
    blocks = get_blocks_by_floor(floor_id)
    block_number = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    for b_id, number in blocks:
        if b_id == block_id:
            block_number = number
            break
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ—Å—Ç–∞—Ö –±–ª–æ–∫–∞
    elder_info = get_block_elders(block_id)
    elder_text = ""
    
    if elder_info:
        elder_text = "\n\n–°—Ç–∞—Ä–æ—Å—Ç—ã –±–ª–æ–∫–∞:\n"
        for elder in elder_info:
            last_login = elder.get('last_login', '–ù–∏–∫–æ–≥–¥–∞')
            elder_text += f"üë®‚Äçüíº {elder['username']} (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login})\n"
    else:
        elder_text = "\n\n–°—Ç–∞—Ä–æ—Å—Ç –±–ª–æ–∫–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–º
    keyboard = [
        [InlineKeyboardButton("üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –±–ª–æ–∫–∞", callback_data="change_block_password")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_floor_{floor_id}")]
    ]
    
    await query.edit_message_text(
        f"üö™ –ë–ª–æ–∫: {block_number}{elder_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def request_new_block_password(update: Update, context: ContextTypes.DEFAULT_TYPE, block_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–ª–æ–∫–∞"""
    query = update.callback_query
    context.user_data['awaiting_new_block_password'] = True
    context.user_data['target_block_id'] = block_id
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–ª–æ–∫–∞:",
        reply_markup=get_back_button("edit_block_" + str(block_id))
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def select_dormitory_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—â–µ–∂–∏—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—â–µ–∂–∏—Ç–∏–π
    dormitories = get_all_dormitories()
    
    if not dormitories:
        await query.edit_message_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—â–µ–∂–∏—Ç–∏–π.",
            reply_markup=get_back_button("manage_dormitories")
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—â–µ–∂–∏—Ç–∏—è
    keyboard = []
    for dorm_id, dorm_name in dormitories:
        keyboard.append([InlineKeyboardButton(
            f"üè† {dorm_name}", 
            callback_data=f"confirm_delete_dorm_{dorm_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_dormitories")])
    
    await query.edit_message_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–µ–∂–∏—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
        "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —ç—Ç–∞–∂–∏, –±–ª–æ–∫–∏ –∏ –∫–æ–º–Ω–∞—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def select_floor_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–∂–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    dorm_id = context.user_data.get('current_dorm_id')
    
    if not dorm_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ.",
            reply_markup=get_back_button("manage_dormitories")
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–∂–µ–π
    floors = get_floors_by_dorm(dorm_id)
    
    if not floors:
        await query.edit_message_text(
            "–í —ç—Ç–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —ç—Ç–∞–∂–µ–π.",
            reply_markup=get_back_button(f"edit_dorm_{dorm_id}")
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–∂–∞
    keyboard = []
    for floor_id, floor_number in floors:
        keyboard.append([InlineKeyboardButton(
            f"üî¢ –≠—Ç–∞–∂ {floor_number}", 
            callback_data=f"confirm_delete_floor_{floor_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_dorm_{dorm_id}")])
    
    await query.edit_message_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
        "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –±–ª–æ–∫–∏ –∏ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç—Ç–∞–∂–µ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def select_block_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    floor_id = context.user_data.get('current_floor_id')
    
    if not floor_id:
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂.",
            reply_markup=get_back_button("manage_floors")
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤
    blocks = get_blocks_by_floor(floor_id)
    
    if not blocks:
        await query.edit_message_text(
            "–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–∂–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–æ–∫–æ–≤.",
            reply_markup=get_back_button(f"edit_floor_{floor_id}")
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
    keyboard = []
    for block_id, block_number in blocks:
        keyboard.append([InlineKeyboardButton(
            f"üö™ –ë–ª–æ–∫ {block_number}", 
            callback_data=f"confirm_delete_block_{block_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_floor_{floor_id}")])
    
    await query.edit_message_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
        "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª–æ–∫–µ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
async def show_all_schedules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤"""
    query = update.callback_query
    
    # –ü–æ–∫–∞ —Ä–µ–∞–ª–∏–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    await query.edit_message_text(
        "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_back_button("manager_panel")
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ—Å—Ç–∞–º–∏
async def manage_elders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞–º–∏ –±–ª–æ–∫–æ–≤"""
    query = update.callback_query
    
    # –ü–æ–∫–∞ —Ä–µ–∞–ª–∏–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    await query.edit_message_text(
        "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞–º–∏\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_back_button("manager_panel")
    )
