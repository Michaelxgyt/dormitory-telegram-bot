import asyncio
import pytz
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import TIMEZONE, DEFAULT_NOTIFICATION_SETTINGS # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from database import (
    # get_notification_settings, # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    get_block_notification_settings, # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    save_notification,
    get_users_by_room,
    get_todays_duties,
    get_tomorrows_duties,
    get_user_role,
    get_duty_details, # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è send_duty_change_notification
    get_room_details  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è send_duty_change_notification
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞, —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
def load_effective_notification_settings(block_id: int = None):
    if block_id:
        block_settings = get_block_notification_settings(block_id)
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å, –Ω–∞—á–∏–Ω–∞—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        effective_settings = DEFAULT_NOTIFICATION_SETTINGS.copy()
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for key, value in block_settings.items():
            if value is not None: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                 effective_settings[key] = value
        return effective_settings
    return DEFAULT_NOTIFICATION_SETTINGS.copy() # –ï—Å–ª–∏ block_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ


# –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def get_compact_navigation(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_role = get_user_role(user_id) or 'student'
    keyboard = []

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    row1 = []
    row1.append(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="back_to_main"))
    # –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞" –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–º–Ω–∞—Ç–∞
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É get_user_room_id(user_id)
    row1.append(InlineKeyboardButton("üìÖ –ú–æ–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞", callback_data="my_duties"))
    keyboard.append(row1)

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    row2 = []
    if user_role == 'student':
        row2.append(InlineKeyboardButton("üõèÔ∏è –ú–æ—è –∫–æ–º–Ω–∞—Ç–∞", callback_data="select_room"))
    elif user_role == 'elder':
        row2.append(InlineKeyboardButton("üõ°Ô∏è –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã", callback_data="elder_panel"))
    elif user_role == 'manager':
        row2.append(InlineKeyboardButton("üè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manager_panel"))
    elif user_role == 'admin':
        row2.append(InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_panel"))

    if row2:
        keyboard.append(row2)

    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_and_send_notifications(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(pytz.timezone(TIMEZONE))
    current_time_str = now.strftime('%H:%M') # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    today_date_str = now.strftime('%Y-%m-%d')
    tomorrow_date_str = (now + timedelta(days=1)).strftime('%Y-%m-%d')

    # print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time_str}") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
    tomorrow_duties = get_tomorrows_duties() # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç block_id
    # duties: (duty_id, room_id, room_number, block_number_str, floor_number, dorm_name, completed, block_id_int)

    for duty_id, room_id, room_number, _, _, _, _, duty_block_id in tomorrow_duties: # _ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        settings = load_effective_notification_settings(duty_block_id) # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
        if current_time_str == settings['preview_time']:
            # print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ {duty_block_id} (–∫–æ–º–Ω–∞—Ç–∞ {room_number}) –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date_str})") # –û—Ç–ª–∞–¥–∫–∞
            users = get_users_by_room(room_id)
            if not users: # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç —é–∑–µ—Ä–æ–≤
                # print(f"–í –∫–æ–º–Ω–∞—Ç–µ {room_number} (ID: {room_id}) –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                continue
            for user_id, username in users:
                message_text = settings['preview_text']
                custom_message = (f"üîî {message_text}\n\n"
                                  f"üìÖ –î–∞—Ç–∞: –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date_str})\n"
                                  f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room_number}")
                try:
                    navigation_keyboard = get_compact_navigation(user_id)
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=custom_message,
                        reply_markup=navigation_keyboard
                    )
                    save_notification(user_id, 'preview', custom_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username}): {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    today_duties = get_todays_duties() # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç block_id
    for duty_id, room_id, room_number, _, _, _, _, duty_block_id in today_duties:
        settings = load_effective_notification_settings(duty_block_id) # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
        if current_time_str == settings['duty_time']:
            # print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ {duty_block_id} (–∫–æ–º–Ω–∞—Ç–∞ {room_number}) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_date_str})") # –û—Ç–ª–∞–¥–∫–∞
            users = get_users_by_room(room_id)
            if not users:
                # print(f"–í –∫–æ–º–Ω–∞—Ç–µ {room_number} (ID: {room_id}) –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                continue
            for user_id, username in users:
                message_text = settings['duty_text']
                custom_message = (f"‚è∞ {message_text}\n\n"
                                  f"üìÖ –î–∞—Ç–∞: —Å–µ–≥–æ–¥–Ω—è ({today_date_str})\n"
                                  f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room_number}")
                try:
                    navigation_keyboard = get_compact_navigation(user_id)
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=custom_message,
                        reply_markup=navigation_keyboard
                    )
                    save_notification(user_id, 'duty', custom_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username}): {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ –¥–Ω—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞
async def send_duty_change_notification(bot, duty_id, old_room_id, new_room_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–∏—Ç–µ–ª—è–º –∫–æ–º–Ω–∞—Ç—ã –æ —Å–º–µ–Ω–µ –¥–Ω—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
    :param duty_id: ID –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    :param old_room_id: ID —Å—Ç–∞—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ)
    :param new_room_id: ID –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ (–¥–∞—Ç—É)
    duty_details_info = get_duty_details(duty_id) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    if not duty_details_info:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ {duty_id}")
        return

    duty_date = duty_details_info[0]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –¥–∞—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ä–æ–π –∫–æ–º–Ω–∞—Ç–µ
    old_room_number = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"
    if old_room_id:
        old_room_details = get_room_details(old_room_id)
        if old_room_details:
            old_room_number = old_room_details[0]


    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    new_room_details = get_room_details(new_room_id)
    if not new_room_details:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ {new_room_id}")
        return

    new_room_number = new_room_details[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è–º —Å—Ç–∞—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
    if old_room_id and old_room_id != new_room_id: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        old_room_users = get_users_by_room(old_room_id)
        for user_id, username in old_room_users:
            message = (f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞!\n\n"
                       f"–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ {duty_date} –±—ã–ª–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã (‚Ññ{old_room_number}) "
                       f"–Ω–∞ –∫–æ–º–Ω–∞—Ç—É ‚Ññ{new_room_number}.\n\n"
                       f"–í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å!")

            try:
                navigation_keyboard = get_compact_navigation(user_id)
                await bot.send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=navigation_keyboard
                )
                save_notification(user_id, 'duty_change_removed', message) # –ò–∑–º–µ–Ω–∏–ª —Ç–∏–ø
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä–∞—è –∫–æ–º–Ω–∞—Ç–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username}): {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∂–∏—Ç–µ–ª—è–º –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    if new_room_id: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ = None (—Ö–æ—Ç—è —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
        new_room_users = get_users_by_room(new_room_id)
        for user_id, username in new_room_users:
            if old_room_id == new_room_id: # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Ç–∞ –∂–µ, —Ç–µ–∫—Å—Ç –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π
                 message = (f"‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞!\n\n"
                           f"–î–µ–∂—É—Ä—Å—Ç–≤–æ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã (‚Ññ{new_room_number}) –Ω–∞ {duty_date} –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                           f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            else:
                message = (f"‚ö†Ô∏è –ù–æ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!\n\n"
                           f"–í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ (‚Ññ{new_room_number}) –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ {duty_date}.")

            try:
                navigation_keyboard = get_compact_navigation(user_id)
                await bot.send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=navigation_keyboard
                )
                save_notification(user_id, 'duty_change_assigned', message) # –ò–∑–º–µ–Ω–∏–ª —Ç–∏–ø
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username}): {e}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
def setup_notification_scheduler(application):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    application.job_queue.run_repeating(check_and_send_notifications, interval=60, first=5) # first=5 —á—Ç–æ–±—ã –¥–∞—Ç—å –±–æ—Ç—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è